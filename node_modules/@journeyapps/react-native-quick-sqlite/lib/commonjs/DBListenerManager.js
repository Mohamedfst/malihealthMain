"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DBListenerManagerInternal = exports.DBListenerManager = void 0;
var _tableUpdates = require("./table-updates");
var _types = require("./types");
var _BaseObserver = require("./utils/BaseObserver");
class DBListenerManager extends _BaseObserver.BaseObserver {}
exports.DBListenerManager = DBListenerManager;
class DBListenerManagerInternal extends DBListenerManager {
  constructor(options) {
    super();
    this.options = options;
    this.updateBuffer = [];
    (0, _tableUpdates.registerUpdateHook)(this.options.dbName, update => this.handleTableUpdates(update));
    (0, _tableUpdates.registerTransactionHook)(this.options.dbName, eventType => {
      switch (eventType) {
        /**
         * COMMIT hooks occur before the commit is completed. This leads to race conditions.
         * Only use the rollback event to clear updates.
         */
        case _types.TransactionEvent.ROLLBACK:
          this.transactionReverted();
          break;
      }
      this.iterateListeners(l => l.writeTransaction?.({
        type: eventType
      }));
    });
  }
  flushUpdates() {
    if (!this.updateBuffer.length) {
      return;
    }
    const groupedUpdates = this.updateBuffer.reduce((grouping, update) => {
      const {
        table
      } = update;
      const updateGroup = grouping[table] || (grouping[table] = []);
      updateGroup.push(update);
      return grouping;
    }, {});
    const batchedUpdate = {
      groupedUpdates,
      rawUpdates: this.updateBuffer,
      tables: Object.keys(groupedUpdates)
    };
    this.updateBuffer = [];
    this.iterateListeners(l => l.tablesUpdated?.(batchedUpdate));
  }
  transactionReverted() {
    // clear updates
    this.updateBuffer = [];
  }
  handleTableUpdates(notification) {
    // Fire updates for any change
    this.iterateListeners(l => l.rawTableChange?.({
      ...notification
    }));

    // Queue changes until they are flushed
    this.updateBuffer.push(notification);
  }
}
exports.DBListenerManagerInternal = DBListenerManagerInternal;
//# sourceMappingURL=DBListenerManager.js.map